// $ANTLR : "sql-gen.g" -> "SqlGeneratorBase.java"$

package org.hibernate.hql.internal.antlr;

public interface SqlTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int ALL = 4;
	int ANY = 5;
	int AND = 6;
	int AS = 7;
	int ASCENDING = 8;
	int AVG = 9;
	int BETWEEN = 10;
	int CLASS = 11;
	int COUNT = 12;
	int DELETE = 13;
	int DESCENDING = 14;
	int DOT = 15;
	int DISTINCT = 16;
	int ELEMENTS = 17;
	int ESCAPE = 18;
	int EXISTS = 19;
	int FALSE = 20;
	int FETCH = 21;
	int FROM = 22;
	int FULL = 23;
	int GROUP = 24;
	int HAVING = 25;
	int IN = 26;
	int INDICES = 27;
	int INNER = 28;
	int INSERT = 29;
	int INTO = 30;
	int IS = 31;
	int JOIN = 32;
	int LEFT = 33;
	int LIKE = 34;
	int MAX = 35;
	int MIN = 36;
	int NEW = 37;
	int NOT = 38;
	int NULL = 39;
	int OR = 40;
	int ORDER = 41;
	int OUTER = 42;
	int PROPERTIES = 43;
	int RIGHT = 44;
	int SELECT = 45;
	int SET = 46;
	int SOME = 47;
	int SUM = 48;
	int TRUE = 49;
	int UPDATE = 50;
	int VERSIONED = 51;
	int WHERE = 52;
	int NULLS = 53;
	int FIRST = 54;
	int LAST = 55;
	int CASE = 56;
	int END = 57;
	int ELSE = 58;
	int THEN = 59;
	int WHEN = 60;
	int ON = 61;
	int WITH = 62;
	int BOTH = 63;
	int EMPTY = 64;
	int LEADING = 65;
	int MEMBER = 66;
	int OBJECT = 67;
	int OF = 68;
	int TRAILING = 69;
	int KEY = 70;
	int VALUE = 71;
	int ENTRY = 72;
	int AGGREGATE = 73;
	int ALIAS = 74;
	int CONSTRUCTOR = 75;
	int CASE2 = 76;
	int CAST = 77;
	int COLL_PATH = 78;
	int EXPR_LIST = 79;
	int FILTER_ENTITY = 80;
	int IN_LIST = 81;
	int INDEX_OP = 82;
	int IS_NOT_NULL = 83;
	int IS_NULL = 84;
	int METHOD_CALL = 85;
	int NOT_BETWEEN = 86;
	int NOT_IN = 87;
	int NOT_LIKE = 88;
	int ORDER_ELEMENT = 89;
	int QUERY = 90;
	int RANGE = 91;
	int ROW_STAR = 92;
	int SELECT_FROM = 93;
	int COLL_SIZE = 94;
	int UNARY_MINUS = 95;
	int UNARY_PLUS = 96;
	int VECTOR_EXPR = 97;
	int WEIRD_IDENT = 98;
	int CONSTANT = 99;
	int NUM_DOUBLE = 100;
	int NUM_FLOAT = 101;
	int NUM_LONG = 102;
	int NUM_BIG_INTEGER = 103;
	int NUM_BIG_DECIMAL = 104;
	int JAVA_CONSTANT = 105;
	int COMMA = 106;
	int EQ = 107;
	int OPEN = 108;
	int CLOSE = 109;
	int IDENT = 110;
	int LITERAL_by = 111;
	int LITERAL_ascending = 112;
	int LITERAL_descending = 113;
	int NE = 114;
	int SQL_NE = 115;
	int LT = 116;
	int GT = 117;
	int LE = 118;
	int GE = 119;
	int CONCAT = 120;
	int PLUS = 121;
	int MINUS = 122;
	int STAR = 123;
	int DIV = 124;
	int MOD = 125;
	int OPEN_BRACKET = 126;
	int CLOSE_BRACKET = 127;
	int QUOTED_STRING = 128;
	int COLON = 129;
	int PARAM = 130;
	int NUM_INT = 131;
	int ID_START_LETTER = 132;
	int ID_LETTER = 133;
	int ESCqs = 134;
	int WS = 135;
	int HEX_DIGIT = 136;
	int EXPONENT = 137;
	int FLOAT_SUFFIX = 138;
	int FROM_FRAGMENT = 139;
	int IMPLIED_FROM = 140;
	int JOIN_FRAGMENT = 141;
	int ENTITY_JOIN = 142;
	int SELECT_CLAUSE = 143;
	int LEFT_OUTER = 144;
	int RIGHT_OUTER = 145;
	int ALIAS_REF = 146;
	int PROPERTY_REF = 147;
	int SQL_TOKEN = 148;
	int SELECT_COLUMNS = 149;
	int SELECT_EXPR = 150;
	int THETA_JOINS = 151;
	int FILTERS = 152;
	int METHOD_NAME = 153;
	int NAMED_PARAM = 154;
	int BOGUS = 155;
	int RESULT_VARIABLE_REF = 156;
	int SQL_NODE = 157;
}
